(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{276:function(t,a,s){"use strict";s.r(a);var n=s(3),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("p",[t._v("JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存，不同浏览器对应不同的执行环境，在浏览器的发展历史上，主要使用了两种垃圾回收策略：标记清理和引用计数。")]),t._v(" "),s("h2",{attrs:{id:"标记清理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记清理"}},[t._v("#")]),t._v(" 标记清理")]),t._v(" "),s("p",[t._v("JavaScript 最常使用的垃圾回收策略是标记清理，程序在运行的时候会给内存中存储的变量打上标记，然后再将所有在上下文中以及被上下文中的变量引用的变量的标记去除，在此之后再被标记的变量就是待删除的变量了，随后垃圾回收程序会做一次内存清理，销毁带标记的所有值并回收它们的内存。")]),t._v(" "),s("h2",{attrs:{id:"引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),s("p",[t._v("记录每个变量被引用的次数，声明变量的时候给变量赋一个引用值，这个值的引用数为 1，如果同一个变量又被赋值给另一个变量，那么引用数加 1，如果变量被覆盖了，那么引用数减 1，当一个变量的引用数为 0 的时候，就表示没办法再访问这个变量了，此时就可以安全地回收其内存了，垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。")]),t._v(" "),s("p",[t._v("引用计数对于对象循环引用的场景存在着较大的缺陷，如下代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于这段代码，因为循环引用的存在，对象 "),s("code",[t._v("a")]),t._v(" 和 "),s("code",[t._v("b")]),t._v(" 的引用数永远都不会变成 0，所以在函数执行完后这两个对象的内存不会被释放，在多次调用函数后就会产生大量的内存泄露。")]),t._v(" "),s("h2",{attrs:{id:"内存泄露的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露的场景"}},[t._v("#")]),t._v(" 内存泄露的场景")]),t._v(" "),s("h3",{attrs:{id:"意外的全局变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#意外的全局变量"}},[t._v("#")]),t._v(" 意外的全局变量")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在执行完函数 "),s("code",[t._v("foo")]),t._v(" 之后，会创建一个全局变量 "),s("code",[t._v("bar")]),t._v("，该变量的内存在函数执行完后不会被自动释放，造成了内存泄露。")]),t._v(" "),s("h3",{attrs:{id:"被遗忘的计时器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#被遗忘的计时器"}},[t._v("#")]),t._v(" 被遗忘的计时器")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("setInterval()")]),t._v(" 之后，如果未能调用 "),s("code",[t._v("clearInterval()")]),t._v(" 去手动解除定时器，那么其回调函数中引用到的变量的内存就不会被系统释放，同样，另一个定时器 "),s("code",[t._v("setTimeout()")]),t._v(" 也存在这种问题。")]),t._v(" "),s("h3",{attrs:{id:"未解除的闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未解除的闭包"}},[t._v("#")]),t._v(" 未解除的闭包")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("调用函数 "),s("code",[t._v("foo")]),t._v(" 之后会返回一个函数存储在变量 "),s("code",[t._v("a")]),t._v(" 中，此时由于返回的函数中仍然依赖着上一层作用域中的变量 "),s("code",[t._v("bar")]),t._v("，所以，在 "),s("code",[t._v("foo")]),t._v(" 调用之后变量 "),s("code",[t._v("bar")]),t._v(" 的内存并不会被释放，就会造成内存的泄露。")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.ituring.com.cn/book/2472",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 高级程序设计（第 4 版）"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);