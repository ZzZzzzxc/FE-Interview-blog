(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{204:function(t,v,_){t.exports=_.p+"assets/img/http-1.284ba558.jpg"},246:function(t,v,_){"use strict";_.r(v);var e=_(3),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"应用层协议-http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用层协议-http"}},[t._v("#")]),t._v(" 应用层协议 HTTP")]),t._v(" "),e("p",[t._v("HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。")]),t._v(" "),e("h2",{attrs:{id:"http-报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-报文"}},[t._v("#")]),t._v(" HTTP 报文")]),t._v(" "),e("p",[t._v("HTTP 报文是 HTTP 协议的核心内容，HTTP 协议在规范文档里详细定义了报文的格式，规定了组成部分，解析规则和处理策略，所以可以在 TCP/IP 层之上实现更灵活丰富的功能，例如连接控制，缓存管理、数据编码、内容协商等等。")]),t._v(" "),e("p",[t._v("HTTP 报文主要由起始行，报文首部和报文体（可选）三大部分构成；HTTP 报文又根据发送方的不同分为请求报文和响应报文。")]),t._v(" "),e("p",[t._v("如图：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(204),alt:"HTTP报文.png"}})]),t._v(" "),e("p",[t._v("所有的 HTTP 报文都以一个起始行作为开始，请求报文的起始行说明了要做什么，响应报文的起始行说明发生了什么。")]),t._v(" "),e("h3",{attrs:{id:"请求报文的起始行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求报文的起始行"}},[t._v("#")]),t._v(" 请求报文的起始行")]),t._v(" "),e("p",[t._v("根据 RFC 文档的定义，请求行（request-line）为：")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("method SP request-target SP HTTP-version CRLF\n")])])]),e("p",[e("strong",[t._v("常规的请求行由请求方法，请求目标和 http 协议版本号组成。")])]),t._v(" "),e("p",[t._v("比如 "),e("code",[t._v("GET /web/api/rest/articles/list?page=5&current=0 HTTP/1.1")])]),t._v(" "),e("p",[t._v("对照上面的定义就是：")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("method = GET\nrequest-target = /web/api/rest/articles/list?page=5&current=0\nHTTP-version = HTTP/1.1\n")])])]),e("h3",{attrs:{id:"响应报文的起始行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应报文的起始行"}},[t._v("#")]),t._v(" 响应报文的起始行")]),t._v(" "),e("p",[t._v("根据 RFC 文档的定义，响应行（status-line）为：")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("HTTP-version SP status-code SP reason-phrase CRLF\n")])])]),e("p",[t._v("响应行由 http 版本号，状态码和状态码的解释三部分组成。")]),t._v(" "),e("h2",{attrs:{id:"请求方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),e("p",[t._v("HTTP 定义了一组请求方法, 以表明要对给定资源执行的操作,请求方法主要有以下几种：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("请求方法")]),t._v(" "),e("th",[t._v("作用")]),t._v(" "),e("th",[t._v("幂等性")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("GET")]),t._v(" "),e("td",[t._v("从服务器获取一份文档")]),t._v(" "),e("td",[t._v("幂等")])]),t._v(" "),e("tr",[e("td",[t._v("HEAD")]),t._v(" "),e("td",[t._v("类似 GET 方法，但服务器不返回 body")]),t._v(" "),e("td",[t._v("幂等")])]),t._v(" "),e("tr",[e("td",[t._v("POST")]),t._v(" "),e("td",[t._v("向服务器发送需要处理的数据，如 FORM 表单提交")]),t._v(" "),e("td",[t._v("非幂等")])]),t._v(" "),e("tr",[e("td",[t._v("PUT")]),t._v(" "),e("td",[t._v("将请求的 body 部分存储在服务器上")]),t._v(" "),e("td",[t._v("带条件时幂等")])]),t._v(" "),e("tr",[e("td",[t._v("TRACE")]),t._v(" "),e("td",[t._v("回显服务器收到的请求，用于问题定位")]),t._v(" "),e("td",[t._v("非幂等")])]),t._v(" "),e("tr",[e("td",[t._v("OPTIONS")]),t._v(" "),e("td",[t._v("显示服务器对访问资源的支持方法，CORS 解决跨域时会用到")]),t._v(" "),e("td",[t._v("幂等")])]),t._v(" "),e("tr",[e("td",[t._v("DELETE")]),t._v(" "),e("td",[t._v("从服务器上删除一份文档")]),t._v(" "),e("td",[t._v("幂等")])])])]),t._v(" "),e("h3",{attrs:{id:"get-和-post-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),e("ul",[e("li",[t._v("从缓存角度看，GET 请求后浏览器会主动缓存，POST 默认情况下不能。")]),t._v(" "),e("li",[t._v("从参数角度来看，GET 请求一般放在 URL 中，因此不安全，POST 请求放在请求体中，相对而言较为安全，但是在抓包的情况下都是一样的。")]),t._v(" "),e("li",[t._v("从编码角度看，GET 请求只能经行 URL 编码，只能接受 ASCII 码，而 POST 支持更多的编码类型且不对数据类型限值。")]),t._v(" "),e("li",[t._v("从幂等性看，GET 请求幂等，POST 请求不幂等，幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致。")]),t._v(" "),e("li",[t._v("GET 请求会一次性发送请求报文，POST 请求通常分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。")]),t._v(" "),e("li",[t._v("从应用场景角度来看，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。")])]),t._v(" "),e("h2",{attrs:{id:"状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),e("p",[t._v("状态码主要由 1xx 系列，2xx 系列，3xx 系列，4xx 系列和 5xx 系列组成。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("状态码")]),t._v(" "),e("th",[t._v("原因短语")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("200")]),t._v(" "),e("td",[t._v("OK")]),t._v(" "),e("td",[t._v("正常返回信息")])]),t._v(" "),e("tr",[e("td",[t._v("201")]),t._v(" "),e("td",[t._v("Created")]),t._v(" "),e("td",[t._v("请求成功且服务器创建了新资源")])]),t._v(" "),e("tr",[e("td",[t._v("202")]),t._v(" "),e("td",[t._v("Accepted")]),t._v(" "),e("td",[t._v("服务器已接受请求并开始进行处理，但请求尚未处理完成")])]),t._v(" "),e("tr",[e("td",[t._v("203")]),t._v(" "),e("td",[t._v("Non-Authoritative")]),t._v(" "),e("td",[t._v("当代理服务器修改了 origin server 的 原始响应包体时（例如更换了 HTML 中的元素值），代理服务器可以通过修改 200 为 203 的方式告知客户端这一事实，方便客户端为这一行为作出相应的处理。 203 响应可以被缓存")])]),t._v(" "),e("tr",[e("td",[t._v("204")]),t._v(" "),e("td",[t._v("No Content")]),t._v(" "),e("td",[t._v("成功执行了请求且不携带响应包体，并暗示客户端无需 更新当前的页面视图")])]),t._v(" "),e("tr",[e("td",[t._v("205")]),t._v(" "),e("td",[t._v("Reset Content")]),t._v(" "),e("td",[t._v("成功执行了请求且不携带响应包体，同时指明客户端 需要更新当前页面视图")])]),t._v(" "),e("tr",[e("td",[t._v("206")]),t._v(" "),e("td",[t._v("Partial Content")]),t._v(" "),e("td",[t._v("使用 range 协议时返回部分响应内容时的响应码")])]),t._v(" "),e("tr",[e("td",[t._v("300")]),t._v(" "),e("td",[t._v("Multiple Choices")]),t._v(" "),e("td",[t._v("资源有多种表述，通过 300 返回给客户端后由其 自行选择访问哪一种表述。由于缺乏明确的细节，300 很少使用")])]),t._v(" "),e("tr",[e("td",[t._v("301")]),t._v(" "),e("td",[t._v("Moved Permanently")]),t._v(" "),e("td",[t._v("资源永久性的重定向到另一个 URI 中")])]),t._v(" "),e("tr",[e("td",[t._v("302")]),t._v(" "),e("td",[t._v("Found")]),t._v(" "),e("td",[t._v("资源临时的重定向到另一个 URI 中")])]),t._v(" "),e("tr",[e("td",[t._v("303")]),t._v(" "),e("td",[t._v("See Other")]),t._v(" "),e("td",[t._v("重定向到其他资源，常用于 POST/PUT 等方法的响应中")])]),t._v(" "),e("tr",[e("td",[t._v("304")]),t._v(" "),e("td",[t._v("Not Modified")]),t._v(" "),e("td",[t._v("当客户端拥有可能过期的缓存时，会携带缓存的标识 etag、时间等信息询问服务器缓存是否仍可复用，而 304 是告诉客户端可以 复用缓存")])]),t._v(" "),e("tr",[e("td",[t._v("400")]),t._v(" "),e("td",[t._v("Bad Request")]),t._v(" "),e("td",[t._v("服务器认为客户端出现了错误，但不能明确判断为以下哪种错误 时使用此错误码。例如 HTTP 请求格式错误")])]),t._v(" "),e("tr",[e("td",[t._v("401")]),t._v(" "),e("td",[t._v("Unauthorized")]),t._v(" "),e("td",[t._v("用户认证信息缺失或者不正确，导致服务器无法处理请求")])]),t._v(" "),e("tr",[e("td",[t._v("403")]),t._v(" "),e("td",[t._v("Forbidden")]),t._v(" "),e("td",[t._v("服务器理解请求的含义，但没有权限执行此请求")])]),t._v(" "),e("tr",[e("td",[t._v("404")]),t._v(" "),e("td",[t._v("Not Found")]),t._v(" "),e("td",[t._v("服务器没有找到对应的资源")])]),t._v(" "),e("tr",[e("td",[t._v("405")]),t._v(" "),e("td",[t._v("Method Not Allowed")]),t._v(" "),e("td",[t._v("服务器不支持请求行中的 method 方法")])]),t._v(" "),e("tr",[e("td",[t._v("406")]),t._v(" "),e("td",[t._v("Not Acceptable")]),t._v(" "),e("td",[t._v("对客户端指定的资源表述不存在（例如对语言或者编码有要 求），服务器返回表述列表供客户端选择")])]),t._v(" "),e("tr",[e("td",[t._v("407")]),t._v(" "),e("td",[t._v("Proxy Authentication Required")]),t._v(" "),e("td",[t._v("对需要经由代理的请求，认证信息未通过代理 服务器的验证")])]),t._v(" "),e("tr",[e("td",[t._v("408")]),t._v(" "),e("td",[t._v("Request Timeout")]),t._v(" "),e("td",[t._v("服务器接收请求超时")])]),t._v(" "),e("tr",[e("td",[t._v("409")]),t._v(" "),e("td",[t._v("Conflict")]),t._v(" "),e("td",[t._v("资源冲突，例如上传文件时目标位置已经存在版本更新的资源")])]),t._v(" "),e("tr",[e("td",[t._v("410")]),t._v(" "),e("td",[t._v("Gone")]),t._v(" "),e("td",[t._v("服务器没有找到对应的资源，且明确的知道该位置永久性找不到该资源")])]),t._v(" "),e("tr",[e("td",[t._v("411")]),t._v(" "),e("td",[t._v("Length Required")]),t._v(" "),e("td",[t._v("如果请求含有包体且未携带 Content-Length 头部，且不属于 chunk 类请求时，返回 411")])]),t._v(" "),e("tr",[e("td",[t._v("412")]),t._v(" "),e("td",[t._v("Precondition Failed")]),t._v(" "),e("td",[t._v("复用缓存时传递的 If-Unmodified-Since 或 IfNone-Match 头部不被满足")])]),t._v(" "),e("tr",[e("td",[t._v("413")]),t._v(" "),e("td",[t._v("Payload Too Large/Request Entity Too Large")]),t._v(" "),e("td",[t._v("请求的包体超出服务器能处理的最大长度")])]),t._v(" "),e("tr",[e("td",[t._v("414")]),t._v(" "),e("td",[t._v("URI Too Long")]),t._v(" "),e("td",[t._v("请求的 URI 超出服务器能接受的最大长度")])]),t._v(" "),e("tr",[e("td",[t._v("415")]),t._v(" "),e("td",[t._v("Unsupported Media Type")]),t._v(" "),e("td",[t._v("上传的文件类型不被服务器支持")])]),t._v(" "),e("tr",[e("td",[t._v("416")]),t._v(" "),e("td",[t._v("Range Not Satisfiable")]),t._v(" "),e("td",[t._v("无法提供 Range 请求中指定的那段包体")])]),t._v(" "),e("tr",[e("td",[t._v("417")]),t._v(" "),e("td",[t._v("Expectation Failed")]),t._v(" "),e("td",[t._v("对于 Expect 请求头部期待的情况无法满足时的 响应码")])]),t._v(" "),e("tr",[e("td",[t._v("500")]),t._v(" "),e("td",[t._v("Internal Server Error")]),t._v(" "),e("td",[t._v("服务器内部错误，且不属于以下错误类型")])]),t._v(" "),e("tr",[e("td",[t._v("501")]),t._v(" "),e("td",[t._v("Not Implemented")]),t._v(" "),e("td",[t._v("服务器不支持实现请求所需要的功能")])]),t._v(" "),e("tr",[e("td",[t._v("502")]),t._v(" "),e("td",[t._v("Bad Gateway")]),t._v(" "),e("td",[t._v("代理服务器无法获取到合法响应")])]),t._v(" "),e("tr",[e("td",[t._v("503")]),t._v(" "),e("td",[t._v("Service Unavailable")]),t._v(" "),e("td",[t._v("服务器资源尚未准备好处理当前请求")])]),t._v(" "),e("tr",[e("td",[t._v("504")]),t._v(" "),e("td",[t._v("Gateway Timeout")]),t._v(" "),e("td",[t._v("代理服务器无法及时的从上游获得响应")])]),t._v(" "),e("tr",[e("td",[t._v("505")]),t._v(" "),e("td",[t._v("HTTP Version Not Supported")]),t._v(" "),e("td",[t._v("请求使用的 HTTP 协议版本不支持")])])])]),t._v(" "),e("ul",[e("li",[t._v("301 和 302 之间的区别？\n"),e("ul",[e("li",[t._v("301 时，客户端可以把请求结果缓存起来，下一次访问时可以直接跳转到重定向之后的页面。")]),t._v(" "),e("li",[t._v("302 时，每次进行访问时，客户端都需要重新进行请求。")])])])]),t._v(" "),e("h2",{attrs:{id:"报文首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#报文首部"}},[t._v("#")]),t._v(" 报文首部")]),t._v(" "),e("p",[t._v("报文首部可以大致可以分为通用首部、请求首部、响应首部、实体首部和扩展首部。")]),t._v(" "),e("h3",{attrs:{id:"通用首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用首部"}},[t._v("#")]),t._v(" 通用首部")]),t._v(" "),e("p",[t._v("通用首部是指客户端和服务器都可以使用的首部。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("首部名称")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Connection")]),t._v(" "),e("td",[t._v("允许客户端和服务器指定与请求/响应连接有关的选项")])]),t._v(" "),e("tr",[e("td",[t._v("Date")]),t._v(" "),e("td",[t._v("提供日期和时间标志，说明报文是什么时间创建的")])]),t._v(" "),e("tr",[e("td",[t._v("MIME-Version")]),t._v(" "),e("td",[t._v("给出了发送端使用的 MIME 版本")])]),t._v(" "),e("tr",[e("td",[t._v("Trailer")]),t._v(" "),e("td",[t._v("如果报文使用了分块传输编码方式，就可以使用这个首部列出位于报文拖挂部分的首部集合")])]),t._v(" "),e("tr",[e("td",[t._v("Transfer-Encoding")]),t._v(" "),e("td",[t._v("告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式")])]),t._v(" "),e("tr",[e("td",[t._v("Update")]),t._v(" "),e("td",[t._v("给出了发送端可能想要“升级”使用的新版本或者协议")])]),t._v(" "),e("tr",[e("td",[t._v("Via")]),t._v(" "),e("td",[t._v("显示了报文经过的中间节点")])]),t._v(" "),e("tr",[e("td",[t._v("Cache-Control")]),t._v(" "),e("td",[t._v("缓存指示")])]),t._v(" "),e("tr",[e("td",[t._v("Pragma")]),t._v(" "),e("td",[t._v("也是缓存指示")])])])]),t._v(" "),e("h3",{attrs:{id:"请求首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求首部"}},[t._v("#")]),t._v(" 请求首部")]),t._v(" "),e("p",[t._v("请求首部是请求报文特有的首部，用于说明是谁在发送请求，请求来自哪里，以及表面客户端的想法和能力。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("首部名称")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Client-IP")]),t._v(" "),e("td",[t._v("表明客户端的 IP 地址")])]),t._v(" "),e("tr",[e("td",[t._v("From")]),t._v(" "),e("td",[t._v("表明客户端用户的 E-mail 地址")])]),t._v(" "),e("tr",[e("td",[t._v("Host")]),t._v(" "),e("td",[t._v("表明请求的服务器的主机名和端口号")])]),t._v(" "),e("tr",[e("td",[t._v("Referer")]),t._v(" "),e("td",[t._v("表明当前请求 URI 的文档的 URL")])]),t._v(" "),e("tr",[e("td",[t._v("User-Agent")]),t._v(" "),e("td",[t._v("表明发起请求的应用程序名称")])]),t._v(" "),e("tr",[e("td",[t._v("Accept")]),t._v(" "),e("td",[t._v("告诉服务器能发送哪些媒体类型")])]),t._v(" "),e("tr",[e("td",[t._v("Accept-Charset")]),t._v(" "),e("td",[t._v("告诉服务器能够发送哪些字符集")])]),t._v(" "),e("tr",[e("td",[t._v("Accept-Encoding")]),t._v(" "),e("td",[t._v("告诉服务器能够发送哪些编码方式")])]),t._v(" "),e("tr",[e("td",[t._v("Accept-Language")]),t._v(" "),e("td",[t._v("告诉服务器能够发送哪些语言")])]),t._v(" "),e("tr",[e("td",[t._v("Expect")]),t._v(" "),e("td",[t._v("允许客户端列出某请求所要求的服务器行为")])]),t._v(" "),e("tr",[e("td",[t._v("If-Match")]),t._v(" "),e("td",[t._v("如果实体标记与文档当前的实体标记相匹配，就获得这份文档")])]),t._v(" "),e("tr",[e("td",[t._v("If-Modified-Since")]),t._v(" "),e("td",[t._v("除非在某个指定的日期之后资源被修改过，否正就限制这个请求")])]),t._v(" "),e("tr",[e("td",[t._v("If-None-Match")]),t._v(" "),e("td",[t._v("如果实体标记与文档当前的实体标记不匹配，就获得这份文档")])]),t._v(" "),e("tr",[e("td",[t._v("If-Range")]),t._v(" "),e("td",[t._v("允许对文档的某个范围进行条件请求")])]),t._v(" "),e("tr",[e("td",[t._v("If-Unmodified-Since")]),t._v(" "),e("td",[t._v("除非在某个指定日期之后资源就没有被修改过，否则就限制这个请求")])]),t._v(" "),e("tr",[e("td",[t._v("Range")]),t._v(" "),e("td",[t._v("如果服务器支持范围请求，就请求资源的指定范围")])]),t._v(" "),e("tr",[e("td",[t._v("Authorization")]),t._v(" "),e("td",[t._v("提供给服务器验证客户端身份的数据")])]),t._v(" "),e("tr",[e("td",[t._v("Proxy-Authorization")]),t._v(" "),e("td",[t._v("提供给代理服务器验证客户端身份的数据")])]),t._v(" "),e("tr",[e("td",[t._v("Proxy-Connection")]),t._v(" "),e("td",[t._v("允许客户端和代理服务器指定与请求/响应连接有关的选项")])])])]),t._v(" "),e("h3",{attrs:{id:"响应首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应首部"}},[t._v("#")]),t._v(" 响应首部")]),t._v(" "),e("p",[t._v("响应报文特有的首部，为客户端提供一些额外信息以便于客户端更好地处理响应。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("首部名称")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Age")]),t._v(" "),e("td",[t._v("响应持续时间")])]),t._v(" "),e("tr",[e("td",[t._v("Public")]),t._v(" "),e("td",[t._v("服务器为其资源支持的请求方法列表")])]),t._v(" "),e("tr",[e("td",[t._v("Retry-After")]),t._v(" "),e("td",[t._v("如果资源不可用的话，在此时间后重试")])]),t._v(" "),e("tr",[e("td",[t._v("Server")]),t._v(" "),e("td",[t._v("服务器应用程序的名称和版本")])]),t._v(" "),e("tr",[e("td",[t._v("Accept-Range")]),t._v(" "),e("td",[t._v("对此资源，服务器接受的范围类型")])]),t._v(" "),e("tr",[e("td",[t._v("Vary")]),t._v(" "),e("td",[t._v("用于列出一个响应字段列表，告诉其他服务器遇到同一个 URL 对应着不同版本文档的情况时，如何筛选出最合适的版本")])]),t._v(" "),e("tr",[e("td",[t._v("Proxy-Authenticate")]),t._v(" "),e("td",[t._v("来自代理的对客户端的质询列表")])]),t._v(" "),e("tr",[e("td",[t._v("WWW-Authenticate")]),t._v(" "),e("td",[t._v("来自服务器的对客户端的质询列表")])])])]),t._v(" "),e("h3",{attrs:{id:"实体首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实体首部"}},[t._v("#")]),t._v(" 实体首部")]),t._v(" "),e("p",[t._v("用于描述传输的实体内容的首部。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("首部名称")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Content-Base")]),t._v(" "),e("td",[t._v("解析主体中的相对 URL 时使用的基础 URL")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Encoding")]),t._v(" "),e("td",[t._v("对主体执行的任意编码方式")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Language")]),t._v(" "),e("td",[t._v("理解主体最合适的自然语言")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Length")]),t._v(" "),e("td",[t._v("主体的 size")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Location")]),t._v(" "),e("td",[t._v("资源实际位置")])]),t._v(" "),e("tr",[e("td",[t._v("Content-MD5")]),t._v(" "),e("td",[t._v("主体的 MD5 校验和")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Range")]),t._v(" "),e("td",[t._v("在整个资源中该实体的字节范围")])]),t._v(" "),e("tr",[e("td",[t._v("Content-Type")]),t._v(" "),e("td",[t._v("该主体的对象类型")])]),t._v(" "),e("tr",[e("td",[t._v("ETag")]),t._v(" "),e("td",[t._v("实体标记")])]),t._v(" "),e("tr",[e("td",[t._v("Expires")]),t._v(" "),e("td",[t._v("实体过期的绝对时间")])]),t._v(" "),e("tr",[e("td",[t._v("Last-Modified")]),t._v(" "),e("td",[t._v("该实体最后修改时间")])])])]),t._v(" "),e("h3",{attrs:{id:"扩展首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展首部"}},[t._v("#")]),t._v(" 扩展首部")]),t._v(" "),e("p",[t._v("扩展首部是指未纳入协议规范，由开发者自行实现的首部，如"),e("code",[t._v("set-cookie")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"http-的包体传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-的包体传输"}},[t._v("#")]),t._v(" HTTP 的包体传输")]),t._v(" "),e("h3",{attrs:{id:"包体定长"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包体定长"}},[t._v("#")]),t._v(" 包体定长")]),t._v(" "),e("p",[t._v("当发送 HTTP 消息时已能够确定包体的全部长度，此时使用 "),e("code",[t._v("Coontent-Length")]),t._v(" 头部明确指明包体长度是多少，且必须与实际传输的包体长度一致。")]),t._v(" "),e("p",[t._v("当实际传输的长度和 "),e("code",[t._v("Coontent-Length")]),t._v(" 不一致时，接收端很可能会拒绝此次传输，导致传输失败。")]),t._v(" "),e("h3",{attrs:{id:"包体不定长"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包体不定长"}},[t._v("#")]),t._v(" 包体不定长")]),t._v(" "),e("p",[t._v("对于不定长的包体，需要在头部设置 "),e("code",[t._v("Transfer-Encoding: chunked")]),t._v(" 对接收端表明是分块传输。")]),t._v(" "),e("p",[t._v("特点")]),t._v(" "),e("ul",[e("li",[t._v("基于长连接持续推送动态内容。")]),t._v(" "),e("li",[t._v("压缩体积较大的包体时，无需完全压缩完（计算出头部）再发送，可以边发送边压缩。")]),t._v(" "),e("li",[t._v("Content-Length 字段会被忽略。")])]),t._v(" "),e("h3",{attrs:{id:"断点续传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断点续传"}},[t._v("#")]),t._v(" 断点续传")]),t._v(" "),e("p",[t._v("对于大文件传输的场景，HTTP 允许服务器基于客户端的请求只发送响应包体的一部分给到客户端，而客户端自动将多个片段的包体组合成完整的体积更大的包体。")]),t._v(" "),e("p",[t._v("当然，并不是所有的服务器都支持这种请求方式，服务器可以添加一个 "),e("code",[t._v("Accept-Ranges")]),t._v(" 头部表示是否支持 Range 请求，如果服务器不支持范围请求，则返回 200 状态码和完整包体。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Accept-Ranges:bytes 支持字节为单位进行传输")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Accept-Ranges:none 不支持")]),t._v("\n")])])]),e("p",[t._v("客户端需要通过一个 "),e("code",[t._v("range")]),t._v(" 头部来指定请求的范围。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// range:bytes=-499 请求前500个字节")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// range:bytes=500-599 请求从500开始的100个字节")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// range:bytes=600- 请求600字节之后的全部")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// range:bytes=500-599 600-699 700-799 多个范围")]),t._v("\n")])])]),e("p",[t._v("服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回 416 错误码，否则读取相应片段，返回 206 状态码。")]),t._v(" "),e("p",[t._v("同时，服务器需要添加 Content-Range 字段，这个字段的格式根据请求头中 Range 字段的不同而有所差异。")]),t._v(" "),e("p",[t._v("对于单段数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("HTTP/1.1 206 Partial Content\nContent-Length: 10\nAccept-Ranges: bytes\nContent-Range: bytes 0-9/100\n\ni am xxxxx\n")])])]),e("p",[t._v("在 Content-Range 字段中，0-9 表示请求的返回，100 表示资源的总大小。")]),t._v(" "),e("p",[t._v("对于多段数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("HTTP/1.1 206 Partial Content\nContent-Type: multipart/byteranges; boundary=00000010101\nContent-Length: 189\nConnection: keep-alive\nAccept-Ranges: bytes\n\n\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 0-9/96\n\ni am xxxxx\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 20-29/96\n\neex jspy e\n--00000010101--\n")])])]),e("p",[t._v("在 Content-Type 字段中")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("multipart/byteranges")]),t._v(" 用于表明这是一个多段数据请求。")]),t._v(" "),e("li",[e("code",[t._v("boundary=00000010101")]),t._v(" 表明响应体中的分隔符是 "),e("code",[t._v("00000010101")]),t._v("。")])]),t._v(" "),e("p",[t._v("在响应体中各段数据之间会由这里指定的分隔符分开，而且在最后的分隔末尾添上 "),e("code",[t._v("--")]),t._v(" 表示结束。")]),t._v(" "),e("h2",{attrs:{id:"http-连接模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-连接模式"}},[t._v("#")]),t._v(" HTTP 连接模式")]),t._v(" "),e("p",[t._v("HTTP 有两种连接模式，一种是持续连接，一种非持续连接。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。")])]),t._v(" "),e("li",[e("p",[t._v("持续连接模式下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。")])])]),t._v(" "),e("p",[t._v("在 HTTP1.0 以前使用的是非持续连接，但是可以在请求时，加上 "),e("code",[t._v("Connection:keep-alive")]),t._v(" 来要求服务器不要关闭 TCP 连接。")]),t._v(" "),e("p",[t._v("HTTP1.1 以后默认采用的是持续连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。")]),t._v(" "),e("h2",{attrs:{id:"http-特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-特点"}},[t._v("#")]),t._v(" HTTP 特点")]),t._v(" "),e("ul",[e("li",[t._v("请求-应答模式：通常是一方发送消息，另外一方要接受消息，或者是做出响应等。")]),t._v(" "),e("li",[t._v("可靠传输：HTTP 使用 TCP 作为传输层协议，保证了数据传输的可靠性。")]),t._v(" "),e("li",[t._v("无状态：HTTP 服务器不会保存关于客户的任何信息。")])]),t._v(" "),e("h2",{attrs:{id:"http-1-1-缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-缺点"}},[t._v("#")]),t._v(" HTTP/1.1 缺点")]),t._v(" "),e("p",[t._v("HTTP/1.1 主要有两个缺点：明文传输和队头阻塞。")]),t._v(" "),e("h3",{attrs:{id:"明文传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#明文传输"}},[t._v("#")]),t._v(" 明文传输")]),t._v(" "),e("p",[t._v("即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。这让 HTTP 的报文信息暴露给了外界，给攻击者带来了便利。")]),t._v(" "),e("p",[t._v("这里我们可以使用 HTTPS（HTTP + TLS/SSL） 来解决这个问题。")]),t._v(" "),e("h3",{attrs:{id:"队头阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞"}},[t._v("#")]),t._v(" 队头阻塞")]),t._v(" "),e("p",[t._v("HTTP/1.1 默认使用了持久连接，多个请求可以复用同一个 TCP 连接，但是在同一个 TCP 连接里面，数据请求的通信次序是固定的，服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，这种情况被称为"),e("strong",[t._v("队头堵塞")]),t._v("。")]),t._v(" "),e("p",[t._v("队头阻塞会导致持久连接在达到最大数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。")]),t._v(" "),e("p",[t._v("造成队头阻塞的根本原因是并发量太大，所以从这个方向出发，可以采用"),e("strong",[t._v("域名分片")]),t._v("的方法去解决，在一个域名下分出多个二级域名出来，而它们最终指向的还是同一个服务器，这样子的话就可以并发处理的任务队列更多，也更好的解决了队头阻塞的问题。")]),t._v(" "),e("h2",{attrs:{id:"http-协议的版本差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-协议的版本差异"}},[t._v("#")]),t._v(" HTTP 协议的版本差异")]),t._v(" "),e("h3",{attrs:{id:"http-0-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9"}},[t._v("#")]),t._v(" HTTP/0.9")]),t._v(" "),e("p",[t._v("1991 年的原型版本，功能简陋，只支持一个 GET 请求，并且只能传输纯文本内容，该版本已过时。")]),t._v(" "),e("h3",{attrs:{id:"http-1-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),e("ul",[e("li",[t._v("任何格式的内容都可以发送，这使得互联网不仅可以传输文字，还能传输图像、视频、二进制等文件。")]),t._v(" "),e("li",[t._v("除了 GET 请求，还引入了 POST 命令和 HEAD 命令。")]),t._v(" "),e("li",[t._v("HTTP 请求和回应的格式改变，除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。")]),t._v(" "),e("li",[t._v("只使用 header 中的 If-Modified-Since 和 Expires 作为缓存失效的标准。")]),t._v(" "),e("li",[t._v("不支持断点续传，也就是说，每次都会传送全部的页面和数据。")]),t._v(" "),e("li",[t._v("通常每台计算机只能绑定一个 IP，所以请求消息中的 URL 并没有传递主机名（hostname）。")])]),t._v(" "),e("h3",{attrs:{id:"http-1-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),e("p",[t._v("HTTP/1.1 是目前最为主流的 HTTP 协议版本，从 1999 年发布至今，仍是主流的 HTTP 协议版本。")]),t._v(" "),e("ul",[e("li",[t._v("引入了持久连接（ persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 Connection: keep-alive。长连接的连接时长可以通过请求头中的 keep-alive 来设置。")]),t._v(" "),e("li",[t._v("引入了管道机制（ pipelining），即在同一个 TCP 连接里，客户端可以同时发送多个请求，进一步改进了 HTTP 协议的效率。")]),t._v(" "),e("li",[t._v("HTTP 1.1 中新增加了 E-tag、If-Unmodified-Since、If-Match、If-None-Match 等缓存控制标头来控制缓存失效。")]),t._v(" "),e("li",[t._v("支持断点续传，通过使用请求头中的 Range 来实现。")]),t._v(" "),e("li",[t._v("使用了虚拟网络，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。")]),t._v(" "),e("li",[t._v("新增请求方法：PUT、 PATCH、 OPTIONS、 DELETE。")])]),t._v(" "),e("h3",{attrs:{id:"http-2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" HTTP/2.0")]),t._v(" "),e("ul",[e("li",[t._v('二进制分帧：这是一次彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"：头信息帧和数据帧。')]),t._v(" "),e("li",[t._v("头部压缩：HTTP/1.1 版本会出现 User-Agent、Cookie、Accept、Server、Range 等字段可能会占用几百甚至几千字节，而 Body 却经常只有几十字节，所以导致头部偏重。HTTP 2.0 使用 HPACK 算法进行压缩。")]),t._v(" "),e("li",[t._v("多路复用：复用 TCP 连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，这样子解决了队头阻塞的问题。")]),t._v(" "),e("li",[t._v("服务器推送：允许服务器未经请求，主动向客户端发送资源，即服务器推送。")]),t._v(" "),e("li",[t._v("请求优先级：可以设置数据帧的优先级，让服务端先处理重要资源，优化用户体验。")])]),t._v(" "),e("h2",{attrs:{id:"https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),e("p",[t._v("由于 HTTP 协议明文传输的特性，因此在传输的每一个环节都有可能出现数据被篡改的情况，为了解决这个问题，可以在 HTTP 和 TCP 之间建立一个中间层进行内容的加密，最后就有了 HTTPS，"),e("code",[t._v("HTTPS = HTTP + TLS/SSL")]),t._v("。")]),t._v(" "),e("p",[t._v("TLS/SSL 的功能实现主要依赖于三类基本算法：散列函数 、对称加密和非对称加密：")]),t._v(" "),e("ul",[e("li",[t._v("利用非对称加密实现身份认证和密钥协商。")]),t._v(" "),e("li",[t._v("对称加密算法采用协商的密钥对数据加密。")]),t._v(" "),e("li",[t._v("基于散列函数验证信息的完整性。")])]),t._v(" "),e("h3",{attrs:{id:"大致流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大致流程"}},[t._v("#")]),t._v(" 大致流程")]),t._v(" "),e("ol",[e("li",[t._v("客户端->服务端：发送支持的密码套件和一个客户端生成的随机数")]),t._v(" "),e("li",[t._v("服务端->客户端：发送服务器选择的密码套件、服务端生成的随机数和数字证书")]),t._v(" "),e("li",[t._v("客户端->服务端：客户端验证数字证书，通过后生成一个新的随机数，将三个随机数联合生成密钥，最后使用公钥加密新的随机数并发送给服务器")]),t._v(" "),e("li",[t._v("服务端->客户端：服务器使用私钥解密收到的随机数，然后将三个随机数联合生成密钥，至此两端都拥有了相同的密钥，最后服务器再向客户端发送一次确认完成交互。")])]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ol",[e("li",[t._v("HTTP 权威指南")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/course/intro/175",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web 协议详解与抓包实战"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/6857287743966281736",target:"_blank",rel:"noopener noreferrer"}},[t._v("「查缺补漏」巩固你的 HTTP 知识体系"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=a.exports}}]);