(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{189:function(v,_,t){v.exports=t.p+"assets/img/url.92d73c75.png"},190:function(v,_,t){v.exports=t.p+"assets/img/DOM-Tree.1e65966d.jpg"},191:function(v,_,t){v.exports=t.p+"assets/img/tree.8e48b77d.png"},192:function(v,_,t){v.exports=t.p+"assets/img/layerTree.e8a7e60a.png"},193:function(v,_,t){v.exports=t.p+"assets/img/raster.a8d954cd.png"},219:function(v,_,t){"use strict";t.r(_);var a=t(3),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的工作原理"}},[v._v("#")]),v._v(" 浏览器的工作原理")]),v._v(" "),a("p",[v._v("要了解工作原理，首先就要从浏览器的架构设计入手，现代浏览器是一个"),a("strong",[v._v("多进程架构")]),v._v("。")]),v._v(" "),a("h2",{attrs:{id:"浏览器的多进程架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的多进程架构"}},[v._v("#")]),v._v(" 浏览器的多进程架构")]),v._v(" "),a("p",[v._v("主要包括以下几个进程：")]),v._v(" "),a("ul",[a("li",[v._v("浏览器进程（只有一个）：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),v._v(" "),a("li",[v._v("渲染进程（也叫浏览器内核，一个标签页一个）：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),v._v(" "),a("li",[v._v("网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),v._v(" "),a("li",[v._v("GPU 进程（最多一个）：其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),v._v(" "),a("li",[v._v("插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),v._v(" "),a("p",[v._v("浏览器内部存在优化策略，有时候会将多个进程进行合并。")]),v._v(" "),a("h3",{attrs:{id:"渲染进程-浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程-浏览器内核"}},[v._v("#")]),v._v(" 渲染进程（浏览器内核）")]),v._v(" "),a("p",[v._v("对于一个前端来说，最需要关心的是渲染进程，这一步涉及 JavaScript 脚本的解析、事件机制和渲染机制等。")]),v._v(" "),a("p",[v._v("渲染进程是多线程的，主要包括：")]),v._v(" "),a("ul",[a("li",[v._v("GUI 渲染线程\n"),a("ul",[a("li",[v._v("负责页面的渲染，DOM 树构建、样式计算、布局和绘制等，当页面需要重绘和重排的时候，该线程就会重新执行。")])])]),v._v(" "),a("li",[v._v("JavaScript 引擎线程\n"),a("ul",[a("li",[v._v("也称为 JavaScript 处理器，负责处理 JavaScript 脚本，如 V8 引擎。")]),v._v(" "),a("li",[v._v("一个标签页中同时只能存在一个线程处理 JavaScript 脚本（JS 单线程）。")])])]),v._v(" "),a("li",[v._v("事件触发线程\n"),a("ul",[a("li",[v._v("控制事件循环")])])]),v._v(" "),a("li",[v._v("定时触发器线程\n"),a("ul",[a("li",[v._v("setTimeout 和 setInterval 所在的线程，由于 JavaScript 引擎是单线程的，所以需要另起一个线程来完成计时的功能。")])])]),v._v(" "),a("li",[v._v("异步 HTTP 请求线程\n"),a("ul",[a("li",[v._v("在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理。")])])])]),v._v(" "),a("p",[v._v("需要注意，GUI 进程和 JavaScript 引擎进程是互斥的，当一个执行的时候，另一个就会被挂起等待执行中的线程完成，如果 JavaScript 引擎线程运行时间过长则会引起页面渲染阻塞。")]),v._v(" "),a("h2",{attrs:{id:"从输入-url-到页面展示中间发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面展示中间发生了什么"}},[v._v("#")]),v._v(" 从输入 URL 到页面展示中间发生了什么？")]),v._v(" "),a("p",[v._v("从一个老问题出发，去了解浏览器的大致工作原理，下图是大致流程：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(189),alt:"从输入URL到页面展示中间发生了什么.png"}})]),v._v(" "),a("p",[v._v("可以通过处理的主要进程不同划分为三个阶段。")]),v._v(" "),a("h3",{attrs:{id:"浏览器进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程"}},[v._v("#")]),v._v(" 浏览器进程")]),v._v(" "),a("p",[v._v("这里主要进行用户输入处理，当用户在输入框输入一个查询关键字时，浏览器会判断输入的关键字是搜索内容，还是请求的 URL。")]),v._v(" "),a("ul",[a("li",[v._v("如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 URL。")]),v._v(" "),a("li",[v._v("如果判断输入内容符合 URL 规则，比如输入的是 github.com，那么地址栏会根据规则，把这段内容加上协议，合成为完整的 URL，如 https://github.com。")])]),v._v(" "),a("p",[v._v("用户键入回车之后，浏览器会触发一次 "),a("code",[v._v("beforeunload")]),v._v(" 事件，开发者可以在页面跳转（窗口关闭）前进行一些处理。")]),v._v(" "),a("h3",{attrs:{id:"网络进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络进程"}},[v._v("#")]),v._v(" 网络进程")]),v._v(" "),a("p",[v._v("这一步最多需要完成构建请求、缓存查找、发出请求和响应处理四个步骤。")]),v._v(" "),a("h4",{attrs:{id:"构建请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建请求"}},[v._v("#")]),v._v(" 构建请求")]),v._v(" "),a("p",[v._v("首先，浏览器构建请求行信息，构建好后，浏览器准备发起网络请求。")]),v._v(" "),a("h4",{attrs:{id:"缓存查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存查找"}},[v._v("#")]),v._v(" 缓存查找")]),v._v(" "),a("p",[v._v("在发起网络请求之前，浏览器会进行缓存的查找。")]),v._v(" "),a("p",[v._v("通过 "),a("code",[v._v("Cache-Control")]),v._v(" 判断强缓存是否可用：")]),v._v(" "),a("ul",[a("li",[v._v("强缓存可用则无需请求服务器，直接使用缓存资源；")]),v._v(" "),a("li",[v._v("否则使用协商缓存，向服务器发送网络请求，服务器通过 "),a("code",[v._v("if-Modified-Since")]),v._v(" 或者 "),a("code",[v._v("If-None-Match")]),v._v(" 判断缓存是否可用：\n"),a("ul",[a("li",[v._v("缓存可用，返回 304 告知浏览器可直接使用缓存。")]),v._v(" "),a("li",[v._v("缓存不可用，返回新的资源和 200 状态码，浏览器响应后更新缓存。")])])])]),v._v(" "),a("p",[v._v("网络进程拿到可用缓存之后将资源直接返回给浏览器进程。")]),v._v(" "),a("h4",{attrs:{id:"发出请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发出请求"}},[v._v("#")]),v._v(" 发出请求")]),v._v(" "),a("p",[v._v("没有缓存的情况下，浏览器在构建完请求之后就会向服务器发起请求。")]),v._v(" "),a("ol",[a("li",[v._v("进行 DNS 解析，得到 IP 地址（涉及缓存等）")]),v._v(" "),a("li",[v._v("IP 地址查找")]),v._v(" "),a("li",[v._v("等待 TCP 连接队列空闲（chrome 对于同一域名的 TCP 连接数有限制，最多只有 6 个，满了就等）")]),v._v(" "),a("li",[v._v("建立 TLS 连接（如果是 HTTPS 的话）")]),v._v(" "),a("li",[v._v("建立 TCP 连接")]),v._v(" "),a("li",[v._v("向服务器发起请求")]),v._v(" "),a("li",[v._v("服务器处理请求")])]),v._v(" "),a("h4",{attrs:{id:"响应处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应处理"}},[v._v("#")]),v._v(" 响应处理")]),v._v(" "),a("p",[v._v("收到服务器的响应之后，浏览器还需要根据响应进行不同的处理。")]),v._v(" "),a("ol",[a("li",[v._v("浏览器处理响应\n"),a("ul",[a("li",[v._v("重定向处理：如果服务器响应行的状态码包含了 301、302 一类的跳转信息，浏览器会跳转到新的地址继续导航；如果响应行是 200，那么表示浏览器可以继续处理该请求；")]),v._v(" "),a("li",[v._v("响应数据类型处理：通过响应头的 Content-Type 判断响应资源的类型，当 Content-Type 的值是 application/octet-stream 时，浏览器会按照下载类型处理该请求，该请求会被提交给浏览器的下载管理器，同时该 URL 请求的导航流程就此结束。")])])]),v._v(" "),a("li",[v._v("准备渲染进程\n判断是否存在同一站点（根域名和协议名相同），当存在同一站点时，复用同一站点的渲染进程，否则开启一个新的渲染进程。")]),v._v(" "),a("li",[v._v("提交文档\n"),a("ul",[a("li",[v._v("首先当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；")]),v._v(" "),a("li",[v._v("渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；")]),v._v(" "),a("li",[v._v("等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程；")]),v._v(" "),a("li",[v._v("浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面。")])])])]),v._v(" "),a("h3",{attrs:{id:"渲染进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[v._v("#")]),v._v(" 渲染进程")]),v._v(" "),a("p",[v._v("渲染进程包括构建 DOM 树、样式计算（Recalculate Style）、布局、分层、图层绘制、栅格化（raster）操作、合成和显示几个步骤。")]),v._v(" "),a("h4",{attrs:{id:"构建-dom-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom-树"}},[v._v("#")]),v._v(" 构建 DOM 树")]),v._v(" "),a("p",[a("img",{attrs:{src:t(190),alt:"DOM 树的构建.jpg"}})]),v._v(" "),a("ol",[a("li",[v._v("转换字节流")])]),v._v(" "),a("ul",[a("li",[v._v("在渲染引擎内部，有一个叫 HTML 解析器（HTMLParser）的模块，它的职责就是负责将 HTML 字节流转换为 DOM 结构。")]),v._v(" "),a("li",[v._v("浏览器从磁盘或网络进程中读取 HTML 的原始字节流（网络进程加载了多少数据，HTML 解析器便解析多少数据），并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。")])]),v._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[v._v("Token 化")]),v._v(" "),a("ul",[a("li",[v._v("浏览器将解析好的字符转换成 W3C HTML5 标准规定的各种 Token。")]),v._v(" "),a("li",[v._v("这里面的 Token 主要有 Tag Token 和 文本 Token，Tag Token 又分 StartTag 和 EndTag，比如 "),a("code",[v._v("<body>")]),v._v(" 就是 StartTag ，"),a("code",[v._v("</body>")]),v._v(" 就是 EndTag。")])])]),v._v(" "),a("li",[a("p",[v._v("词法分析和 DOM 树的构建")]),v._v(" "),a("ul",[a("li",[v._v("将 Token 解析为 DOM 节点，然后将 DOM 节点添加到 DOM 树中。词法分析与 DOM 树的构建是同步进行的。")]),v._v(" "),a("li",[v._v("HTML 解析器维护了一个 Token 栈结构，该 Token 栈主要用来计算节点之间的父子关系，具体的处理规则如下所示：\n"),a("ul",[a("li",[v._v("如果压入到栈中的是 StartTag Token，HTML 解析器会为该 Token 创建一个 DOM 节点，然后将该节点加入到 DOM 树中，它的父节点就是栈中相邻的那个元素生成的节点。")]),v._v(" "),a("li",[v._v("如果分词器解析出来是文本 Token，那么会生成一个文本节点，然后将该节点加入到 DOM 树中，文本 Token 是不需要压入到栈中，它的父节点就是当前栈顶 Token 所对应的 DOM 节点。")]),v._v(" "),a("li",[v._v("如果分词器解析出来的是 EndTag 标签，比如是 EndTag div，HTML 解析器会查看 Token 栈顶的元素是否是 StarTag div，如果是，就将 StartTag div 从栈中弹出，表示该 div 元素解析完成。")])])])])])]),v._v(" "),a("h4",{attrs:{id:"样式计算-recalculate-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式计算-recalculate-style"}},[v._v("#")]),v._v(" 样式计算（Recalculate Style）")]),v._v(" "),a("ol",[a("li",[v._v("把 CSS 转换为 styleSheets：可以通过 "),a("code",[v._v("document.styleSheets")]),v._v(" 查看，是一个对象；")]),v._v(" "),a("li",[v._v("标准化样式表中的值：如："),a("code",[v._v("font-size: 2em")]),v._v(" 会被计算成 "),a("code",[v._v("font-size: 32px")]),v._v("；")]),v._v(" "),a("li",[v._v("计算出 DOM 树中每个节点的具体样式：基于 CSS 的继承规则和层叠规则计算出每一个 DOM 节点具体的样式，计算出来的结果会被保存在 "),a("code",[v._v("ComputedStyle")]),v._v(" 中，可以通过 "),a("code",[v._v("window.getComputedStyle(element)")]),v._v(" 查看 DOM 节点的计算结果。")])]),v._v(" "),a("h4",{attrs:{id:"布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[v._v("#")]),v._v(" 布局")]),v._v(" "),a("ol",[a("li",[v._v("创建布局树：遍历所有可见的 DOM 节点，并将这些节点添加到布局树中；\n"),a("img",{attrs:{src:t(191),alt:"布局树的构建.jpg"}})]),v._v(" "),a("li",[v._v("布局计算")])]),v._v(" "),a("h4",{attrs:{id:"分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[v._v("#")]),v._v(" 分层")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("生成图层树（Layer Tree）\n浏览器的页面实际上被分成了很多图层，这些图层叠加后合成了最终的页面，图层与布局树之间关系，如下图所示：\n"),a("img",{attrs:{src:t(192),alt:"生成图层树.jpg"}}),v._v("\n通常情况下，并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。\n对于至少满足以下其中一种情况的节点，渲染引擎才会为其创建新的图层：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("拥有层叠上下文属性的元素会被提升为单独的一层，层叠上下文基本上是由一些特定的 CSS 属性创建的，一般有以下情况:")]),v._v(" "),a("ul",[a("li",[v._v("HTML 根元素本身就具有层叠上下文。")]),v._v(" "),a("li",[v._v("普通元素设置 position 不为 static 并且设置了 z-index 属性，会产生层叠上下文。")]),v._v(" "),a("li",[v._v("元素的 opacity 值不是 1")]),v._v(" "),a("li",[v._v("元素的 transform 值不是 none")]),v._v(" "),a("li",[v._v("元素的 filter 值不是 none")]),v._v(" "),a("li",[v._v("元素的 isolation 值是 isolate")]),v._v(" "),a("li",[v._v("will-change 指定的属性值为上面任意一个")])])]),v._v(" "),a("li",[a("p",[v._v("需要剪裁（clip）的地方也会被创建为图层")]),v._v(" "),a("ul",[a("li",[v._v("比如一个标签很小，50*50 像素，你在里面放了非常多的文字，那么超出的文字部分就需要被剪裁。当然如果出现了滚动条，那么滚动条也会被单独提升为一个图层。")])])])])])]),v._v(" "),a("h4",{attrs:{id:"图层绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[v._v("#")]),v._v(" 图层绘制")]),v._v(" "),a("p",[v._v("渲染引擎实现的图层绘制会把一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表，最后由主线程提交到合成线程。")]),v._v(" "),a("h4",{attrs:{id:"栅格化-raster-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栅格化-raster-操作"}},[v._v("#")]),v._v(" 栅格化（raster）操作")]),v._v(" "),a("p",[v._v("在有些情况下，有的图层可以很大，比如有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。")]),v._v(" "),a("p",[v._v("基于这个原因，合成线程会将图层划分为图块（tile），这些图块的大小通常是 256x256 或者 512x512。")]),v._v(" "),a("p",[v._v("然后合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(193),alt:"合成线程提交图块给栅格化线程池.jpg"}})]),v._v(" "),a("p",[v._v("通常，栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中。")]),v._v(" "),a("p",[v._v("从图中可以看出，渲染进程把生成图块的指令发送给 GPU，然后在 GPU 中执行生成图块的位图，并保存在 GPU 的内存中。")]),v._v(" "),a("h4",{attrs:{id:"合成和显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[v._v("#")]),v._v(" 合成和显示")]),v._v(" "),a("p",[v._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。")]),v._v(" "),a("p",[v._v("浏览器进程里面有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。")]),v._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[v._v("#")]),v._v(" 参考链接")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000012925872",target:"_blank",rel:"noopener noreferrer"}},[v._v("从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理"),a("OutboundLink")],1)]),v._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/216",target:"_blank",rel:"noopener noreferrer"}},[v._v("浏览器工作原理与实践"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=e.exports}}]);